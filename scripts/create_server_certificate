#!/bin/bash
#
# Copyright (C) 2023 Thomas Mueller (tm-dd)
#
# This code is free software. You can use, redistribute and/or
# modify it under the terms of the GNU General Public Licence
# version 2, as published by the Free Software Foundation.
# This program is distributed without any warranty.
# See the GNU General Public Licence for more details.
#

## START SETTINGS

# read settings from config.cfg
source "`dirname $0`/config.cfg"

# settings for the permitted use of the certificate
cat << STOPWRITE > ${caServerExtFile}
[server_req_ext]
keyUsage = digitalSignature
extendedKeyUsage = clientAuth,serverAuth
STOPWRITE

## END OF SETTINGS

# if missing, create this folders
mkdir -p "${caClientCertFolder}" "${caClientKeysFolder}"
chown root:root "${caClientKeysFolder}" || exit -1
chmod 700 "${caClientKeysFolder}"

# check if parameter is missing
if [ -z "${caServerCNName}" ]
then

	echo "ERROR: THE CN FOR THE NEW CERTIFICATE IS MISSING."
	echo "       PLEASE CHECK THE CONFIG FILE."
	exit -1
fi

# check and stop, if a client certificate still exists
if [ -e "${caServerKeyFile}" ] || [ -e "${caServerCrtFile}" ]
then
	echo "ERROR: A OLDER SERVER CERTIFICATE EXITS."
	echo "Reactivate, remove or rename the older certificate (and retry it again)."
	ls -l "${caServerKeyFile}" "${caServerCrtFile}" "${caServerCsrFile}" 2> /dev/null
	exit -1
fi

# if the parameter will used, try to set alternative DNS name(s)
if [ -n "${caServerALTDNSName}" ]
then
	echo "subjectAltName = ${caServerALTDNSName}" >> ${caServerExtFile}
fi

set -x

# create the client key
openssl genrsa -out "${caServerKeyFile}" -rand "${caPrivateRand}" 4096

# create the certificates request
openssl req -newkey rsa:4096 -key "${caServerKeyFile}" -out "${caServerCsrFile}" -subj "${caCertSubjectStart}/CN=${caServerCNName}"
openssl req -in "${caServerCsrFile}" -text -noout

cat "${caServerExtFile}"

# sign the certificate and move the certificates request to the temp folder (for later deleting)
openssl x509 -req -CA "${caCrtFile}" -CAkey "${caKeyFile}" -in "${caServerCsrFile}" -out "${caServerCrtFile}" -sha512 -extfile "${caServerExtFile}" -extensions "server_req_ext" -days ${caServerCertValidDays}

# read the certificate
openssl x509 -in "${caServerCrtFile}" -text -noout

# write the serial number
caClientSerialNumber=`openssl x509 -in "${caServerCrtFile}" -text -noout | grep -A 1 'Serial Number:' | tail -n 1 | sed 's/://g' | awk '{ print $1 }'`
echo -e "V\t"`date '+%y%m%d%H%M%SZ'`"\t\t${caClientSerialNumber}\tunknown\t${caCertSubjectStart}/CN=${caServerCNName}" >> "${caClientIndexFile}"

mv "${caServerCsrFile}" /tmp/

cat "${caFolder}index.txt"

# create certificate chain
cat "${caCrtFile}" "${caServerCrtFile}" > "${caServerCrtChainFile}"

set +x

# list the new files
if [ -e "${caServerKeyFile}" ] && [ -e "${caServerCrtFile}" ] && [ -e "${caServerCrtChainFile}" ]
then
	echo "NEW FILES:"
	ls -l "${caServerKeyFile}" "${caServerCrtFile}" "${caServerCrtChainFile}"
else
	echo "Error durring ceation of files..."
	exit -1
fi

exit 0;
