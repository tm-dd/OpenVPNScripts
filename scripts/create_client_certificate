#!/bin/bash
#
# Copyright (C) 2023 Thomas Mueller (tm-dd)
#
# This code is free software. You can use, redistribute and/or
# modify it under the terms of the GNU General Public Licence
# version 2, as published by the Free Software Foundation.
# This program is distributed without any warranty.
# See the GNU General Public Licence for more details.
#
## START SETTINGS

# folders and files for the commands 
caRootCertFile='/rootca/rootca/acme_root_ca.crt'
caFolder='/rootca/sub-ca-vpn/'
caCertFile=${caFolder}'acme_sub_ca_vpn.crt'
caPrivateRand=${caFolder}'private/rand'
caPrivateKey=${caFolder}'private/acme_sub_ca_vpn.key.decrypted'
caClientCertFolder=${caFolder}'certs/'
caClientKeysFolder=${caFolder}'keys/'
caClientSubjectStart="/C=DE/ST=State/L=City/O=ACME/OU=Department/emailAddress=support@example.org"
caClientExtFile=${caFolder}'conf/extensions.conf'
caClientIndexFile="${caFolder}index.txt"

# how long should be the certificate vailid
certValidDays=70000

# settings for the permitted use of the certificate
cat << STOPWRITE > ${caClientExtFile}
[client_req_ext]
keyUsage = digitalSignature
extendedKeyUsage = clientAuth
STOPWRITE

## END OF SETTINGS

# the new name of the certificate 
CN="$1"

# if missing, create this folders
mkdir -p "${caClientCertFolder}" "${caClientKeysFolder}"
chown root:root "${caClientKeysFolder}" || exit -1
chmod 700 "${caClientKeysFolder}"

# check if parameter is missing
if [ -z "${CN}" ]
then

	echo "ERROR: USAGE $0 CN_NAME_FOR_THE_NEW_CERTIFICATE"
	echo "Example: $0 login"
	exit -1
fi

# check and stop, if a client certificate still exists
if [ -e "${caClientKeysFolder}${CN}.key" ] || [ -e "${caClientCertFolder}${CN}.crt" ]
then
	echo "ERROR: A OLDER CERTIFICATE FOR ${CN} EXITS."
	echo "Reactivate, remove or rename the older certificate (and retry it again)."
	ls -l "${caClientKeysFolder}${CN}.key" "${caClientCertFolder}${CN}.crt" "${caClientCertFolder}${CN}_chain.pem" 2> /dev/null
	exit -1
fi

set -x

# create the client key
openssl genrsa -out "${caClientKeysFolder}${CN}.key" -rand "${caPrivateRand}" 4096

# create the certificates request
openssl req -newkey rsa:4096 -key "${caClientKeysFolder}${CN}.key" -out "${caClientCertFolder}${CN}.csr" -subj "${caClientSubjectStart}/CN=${CN}"
openssl req -in "${caClientCertFolder}${CN}.csr" -text -noout

# sign the certificate and move the certificates request to the temp folder (for later deleting)
openssl x509 -req -CA "${caCertFile}" -CAkey "${caPrivateKey}" -in "${caClientCertFolder}${CN}.csr" -out "${caClientCertFolder}${CN}.crt" -SHA512 -extfile "${caClientExtFile}" -extensions "client_req_ext" -days ${certValidDays}

# read the certificate
openssl x509 -in "${caClientCertFolder}${CN}.crt" -text -noout

# write the serial number
caClientSerialNumber=`openssl x509 -in "${caClientCertFolder}${CN}.crt" -text -noout | grep -A 1 'Serial Number:' | tail -n 1 | sed 's/://g' | awk '{ print $1 }'`
echo -e "V\t"`date '+%y%m%d%H%M%SZ'`"\t\t${caClientSerialNumber}\tunknown\t${caClientSubjectStart}/CN=${CN}" >> "${caClientIndexFile}"

mv "${caClientCertFolder}${CN}.csr" /tmp/

cat "${caFolder}index.txt"

# create certificate chain
cat "${caRootCertFile}" "${caCertFile}" "${caClientCertFolder}${CN}.crt" > "${caClientCertFolder}${CN}_chain.pem"

set +x

# list the new files
if [ -e "${caClientKeysFolder}${CN}.key" ] && [ -e "${caClientCertFolder}${CN}.crt" ] && [ -e "${caClientCertFolder}${CN}_chain.pem" ]
then
	echo "NEW FILES:"
	ls -l "${caClientKeysFolder}${CN}.key" "${caClientCertFolder}${CN}.crt" "${caClientCertFolder}${CN}_chain.pem"
else
	echo "Error durring ceation of files..."
	exit -1
fi

exit 0;
